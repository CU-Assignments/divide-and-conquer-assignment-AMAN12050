class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
 
        vector<pair<int, int>> events;
        
        // Convert buildings into start and end events
        for (const auto& b : buildings) {
            events.emplace_back(b[0], -b[2]); // Start event with negative height
            events.emplace_back(b[1], b[2]);  // End event with positive height
        }
        
        // Sort events: if x-coordinates are same, process by height
        sort(events.begin(), events.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            if (a.first != b.first) return a.first < b.first;
            return a.second < b.second; // Process start (-height) before end (+height)
        });
        
        vector<vector<int>> result;
        multiset<int> heights = {0}; // Holds current heights
        int prevHeight = 0;
        
        for (const auto& event : events) {
            int x = event.first, h = event.second;
            
            if (h < 0) {
                heights.insert(-h); // Insert start height
            } else {
                heights.erase(heights.find(h)); // Remove end height
            }
            
            int currHeight = *heights.rbegin(); // Max height in set
            
            if (currHeight != prevHeight) {
                result.push_back({x, currHeight});
                prevHeight = currHeight;
            }
        }
        
        return result;
    }
};
 
 
