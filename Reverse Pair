class Solution {
public:
    int reversePairs(vector<int>& nums) {
        if (nums.size() < 2) return 0; // Fixed syntax
        return mergeSort(nums, 0, nums.size() - 1);
    }

private:
    int mergeSort(vector<int>& nums, int left, int right) {
        if (left >= right) return 0;

        int mid = left + (right - left) / 2;
        int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);
        count += merge(nums, left, mid, right);
        return count;
    }

    int merge(vector<int>& nums, int left, int mid, int right) {
        int count = 0;
        int j = mid + 1;

        for (int i = left; i <= mid; i++) {
            while (j <= right && (long long)nums[i] > 2LL * nums[j]) {
                j++;
            }
            count += (j - (mid + 1));
        }

        // Merge the two sorted halves
        vector<int> temp;
        int i = left, l = mid + 1;

        while (i <= mid && l <= right) {
            if (nums[i] <= nums[l]) {
                temp.push_back(nums[i++]);
            } else {
                temp.push_back(nums[l++]);
            }
        }

        while (i <= mid) {
            temp.push_back(nums[i++]);
        }
        while (l <= right) {
            temp.push_back(nums[l++]);
        }

        // Copy sorted values back to nums
        for (int i = 0; i < temp.size(); i++) {
            nums[left + i] = temp[i];
        }

        return count;
    }
};
